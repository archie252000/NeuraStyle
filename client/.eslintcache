[{"D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\index.tsx":"1","D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\reportWebVitals.ts":"2","D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\App.tsx":"3","D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\Components\\Landing.tsx":"4","D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\Components\\GetImages.tsx":"5","D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\Components\\DragDropBox.tsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":515,"mtime":1608923267033,"results":"10","hashOfConfig":"8"},{"size":486,"mtime":1608819825187,"results":"11","hashOfConfig":"8"},{"size":2870,"mtime":1608942131674,"results":"12","hashOfConfig":"8"},{"size":2320,"mtime":1608941966459,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"pn1ydx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\index.tsx",[],["29","30"],"D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\reportWebVitals.ts",[],"D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\App.tsx",[],"D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\Components\\Landing.tsx",[],"D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\Components\\GetImages.tsx",["31"],"import React, {useState, Fragment} from 'react'\r\nimport DragDropBox from './DragDropBox';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nexport const GetImages: React.FC = () => {\r\n   \r\n    const [styleImage, setStyleImage] = useState<File>(new File([''],'dummy.txt'));\r\n    const [contentImage, setContentImage] = useState<File>(new File([''],'dummy.txt'));\r\n    const [transferImagePath, updateTransferImagePath] = useState<string>('');\r\n    const [loading, updateLoading] = useState<boolean> (false);\r\n\r\n    const PropsContent = {image_type:'Content', style_fun: setStyleImage, content_fun: setContentImage};\r\n    const [flag, updateFlag] = useState<boolean> (true);   \r\n    \r\n    \r\n    const PropsStyle = {image_type:'Style', \r\n     style_fun: setStyleImage,\r\n     content_fun: setContentImage};\r\n    const transfer = () => {\r\n        const formData: FormData = new FormData();\r\n        updateFlag(false);\r\n        updateLoading(true);\r\n        \r\n        formData.append('styleImage', styleImage);\r\n        formData.append('contentImage', contentImage);\r\n\r\n        const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            };\r\n\r\n    \r\n            \r\n            axios.post('/get_transfer_image', formData, config).then\r\n            (res => {\r\n            const bytestring: string = res.data['status'];\r\n            let image: string = bytestring.split('\\'')[1]\r\n            image =  'data:image/jpeg;base64,'+image\r\n            updateLoading(false);\r\n            updateTransferImagePath(image)\r\n           }).catch(err => console.log(err))\r\n\r\n            \r\n\r\n               \r\n\r\n         \r\n\r\n         \r\n  \r\n        }\r\n    \r\n    return (\r\n    <Fragment>\r\n    {flag?\r\n        (<div className = \"GetImages\">\r\n        <div className = \"images-box\">\r\n            <DragDropBox {...PropsContent}/>\r\n            <DragDropBox {...PropsStyle} />\r\n        </div>\r\n        <div className=\"tr-bt\"><button type=\"button\" className=\"btn btn-primary transfer-button\" onClick = {transfer}>TRANSFER</button></div>\r\n    </div>):(<div className='TransferPage'>\r\n           <div className=\"transferimage\">\r\n               <h2 className='transfer-heading'>Image with changed style</h2>\r\n               \r\n               \r\n             { loading?(<div className = 'loadScreen'>\r\n                             <div className = \"Spinner\"><div className=\"spinner-grow\" role=\"status\"></div></div>\r\n                             <div className=\"lead center-text\">Processing Image</div>\r\n                             <div className=\"lead center-text\">This might take some time</div>\r\n                         </div>):(<Fragment></Fragment>)\r\n             }\r\n           \r\n            <img id='imgPrime' src={transferImagePath} height='300px' width='auto'  />\r\n           </div>\r\n        </div>)\r\n    }\r\n    </Fragment>\r\n    )\r\n    \r\n}\r\n","D:\\myprojects\\ProjectML\\NeuraStyleTransfer\\client\\src\\Components\\DragDropBox.tsx",["32","33","34"],"import React, {useState, Fragment} from 'react';\r\nimport axios from 'axios';\r\n\r\ninterface Props{\r\n    image_type: string;\r\n    style_fun: React.Dispatch<React.SetStateAction<File>>;\r\n    content_fun:React.Dispatch<React.SetStateAction<File>>;\r\n}\r\n\r\nconst DragDropBox: React.FC<Props> = ({image_type, style_fun, content_fun}) => {\r\n    \r\n\r\n    \r\n\r\n    \r\n    const [imagePath, updateImagePath] = useState<string>('');\r\n    const [loading, updateLoading] = useState<boolean> (false);\r\n    \r\n    \r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        updateLoading(true)\r\n        if(e.target.files && e.target.files[0]){\r\n            \r\n           \r\n            const formData: FormData = new FormData();\r\n            formData.append(image_type, e.target.files[0]);\r\n            let image = ''\r\n\r\n            // const config = {\r\n            //     headers: {\r\n            //         'Content-Type': 'multipart/form-data'\r\n            //     }\r\n            // };\r\n          \r\n            \r\n            if(image_type === 'Content'){\r\n             content_fun(e.target.files[0]);\r\n           \r\n            }\r\n\r\n            if(image_type === 'Style'){\r\n             style_fun(e.target.files[0])\r\n            //  const res = await axios.post('/upload_style_image', formData, config);\r\n            }\r\n\r\n            \r\n            updateLoading(false)\r\n            const url = window.URL.createObjectURL(e.target.files[0])\r\n            updateImagePath(url)\r\n             \r\n        \r\n        }\r\n    \r\n    \r\n    };\r\n    \r\n    return (\r\n        <div className='drag-drop-box'>\r\n        \r\n            <h3>Upload {image_type} Image</h3>\r\n\r\n            <input type = 'file' name ={image_type +\"file\"} id={image_type +\"file\"} className=\"inputfile\" onChange = {e => onChange(e)} />\r\n            \r\n             {loading ? (<div className=\"spinner-grow\" role=\"status\">\r\n                          <span className=\"sr-only\">Loading...</span>\r\n                          </div>):(<Fragment></Fragment>)}\r\n            \r\n            <img id='imgPrime' src={imagePath} height= '300px' width='auto'  />\r\n\r\n            <label htmlFor ={image_type +\"file\"} className=\"btn btn-primary bg-primary\"><i className=\"fa fa-upload\" aria-hidden=\"true\"></i> UPLOAD FILE</label>\r\n\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default DragDropBox;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":77,"column":13,"nodeType":"41","endLine":77,"endColumn":87},{"ruleId":"42","severity":1,"message":"43","line":2,"column":8,"nodeType":"44","messageId":"45","endLine":2,"endColumn":13},{"ruleId":"42","severity":1,"message":"46","line":28,"column":17,"nodeType":"44","messageId":"45","endLine":28,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":69,"column":13,"nodeType":"41","endLine":69,"endColumn":80},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'image' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]